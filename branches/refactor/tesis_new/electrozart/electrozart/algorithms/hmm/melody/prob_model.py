from electrozart import Note
from feature_builder import get_features, get_interval_features
d= {Note('C0'): {Note('C#0'): 0.12000000000000002,
              Note('D#0'): 0.36000000000000004,
              Note('F0'): 0.080000000000000002,
              Note('G0'): 0.16,
              Note('G#0'): 0.12000000000000002,
              Note('A0'): 0.040000000000000001,
              Note('A#0'): 0.12000000000000002},
 Note('C#0'): {Note('C0'): 0.14285714285714285,
               Note('D#0'): 0.071428571428571425,
               Note('F0'): 0.14285714285714285,
               Note('G0'): 0.071428571428571425,
               Note('G#0'): 0.4285714285714286,
               Note('A#0'): 0.14285714285714285},
 Note('D#0'): {Note('C0'): 0.29032258064516137,
               Note('C#0'): 0.064516129032258077,
               Note('G0'): 0.096774193548387122,
               Note('G#0'): 0.35483870967741948,
               Note('A0'): 0.032258064516129038,
               Note('A#0'): 0.096774193548387122,
               Note('B0'): 0.064516129032258077},
 Note('F0'): {Note('C#0'): 0.40000000000000002,
              Note('D#0'): 0.20000000000000001,
              Note('G0'): 0.40000000000000002},
 Note('G0'): {Note('C0'): 0.14285714285714288,
              Note('D#0'): 0.14285714285714288,
              Note('F0'): 0.071428571428571438,
              Note('G#0'): 0.35714285714285721,
              Note('A#0'): 0.2142857142857143,
              Note('B0'): 0.071428571428571438},
 Note('G#0'): {Note('C0'): 0.2558139534883721,
               Note('C#0'): 0.11627906976744186,
               Note('D#0'): 0.30232558139534887,
               Note('G0'): 0.23255813953488372,
               Note('A0'): 0.069767441860465115,
               Note('A#0'): 0.023255813953488372},
 Note('A0'): {Note('C#0'): 0.25,
              Note('D#0'): 0.25,
              Note('G0'): 0.25,
              Note('A#0'): 0.25},
 Note('A#0'): {Note('C0'): 0.16666666666666669,
               Note('C#0'): 0.055555555555555559,
               Note('D#0'): 0.22222222222222224,
               Note('G#0'): 0.50000000000000011,
               Note('B0'): 0.055555555555555559},
 Note('B0'): {Note('C0'): 0.33333333333333331,
              Note('D#0'): 0.33333333333333331,
              Note('G#0'): 0.33333333333333331}}

d= {Note('C0'): {Note('C0'): 0.20740238189102711,
              Note('C#0'): 0.0046024222309829195,
              Note('D0'): 0.12148744418875432,
              Note('D#0'): 0.010029979921703814,
              Note('E0'): 0.13483630229295976,
              Note('F0'): 0.092039276447883525,
              Note('F#0'): 0.015952618888267489,
              Note('G0'): 0.19415437367634519,
              Note('G#0'): 0.011918623307326286,
              Note('A0'): 0.092039276447883525,
              Note('A#0'): 0.02215030300807716,
              Note('B0'): 0.093386997698788887},
 Note('C#0'): {Note('C0'): 0.029876785519572565,
               Note('C#0'): 0.10227892269109148,
               Note('D0'): 0.21240867953331152,
               Note('D#0'): 0.034347399411187439,
               Note('E0'): 0.1122015047432123,
               Note('F0'): 0.074582924435721301,
               Note('F#0'): 0.06433322429397012,
               Note('G0'): 0.071856940355468329,
               Note('G#0'): 0.044488060189728493,
               Note('A0'): 0.13259186566350453,
               Note('A#0'): 0.041325918656635048,
               Note('B0'): 0.079707774506596885},
 Note('D0'): {Note('C0'): 0.19266687891329726,
              Note('C#0'): 0.017324631221479359,
              Note('D0'): 0.12055608617213202,
              Note('D#0'): 0.012814390321553645,
              Note('E0'): 0.16057784145176696,
              Note('F0'): 0.065093388517457287,
              Note('F#0'): 0.027923697336304787,
              Note('G0'): 0.18497293855460045,
              Note('G#0'): 0.013583784357423325,
              Note('A0'): 0.099543669744242808,
              Note('A#0'): 0.018690968905868618,
              Note('B0'): 0.0862517245038735},
 Note('D#0'): {Note('C0'): 0.11273957158962795,
               Note('C#0'): 0.032130777903043965,
               Note('D0'): 0.10698985343855694,
               Note('D#0'): 0.11127395715896279,
               Note('E0'): 0.094250281848928974,
               Note('F0'): 0.074408117249154457,
               Note('F#0'): 0.041488162344983086,
               Note('G0'): 0.13438556933483653,
               Note('G#0'): 0.089627959413754232,
               Note('A0'): 0.060428410372040588,
               Note('A#0'): 0.067981961668545657,
               Note('B0'): 0.074295377677564819},
 Note('E0'): {Note('C0'): 0.16865584962013913,
              Note('C#0'): 0.015229990636815094,
              Note('D0'): 0.14723904566626764,
              Note('D#0'): 0.0072535052682730257,
              Note('E0'): 0.14322117265001838,
              Note('F0'): 0.10984556670972942,
              Note('F#0'): 0.026015431476894266,
              Note('G0'): 0.15983786282341508,
              Note('G#0'): 0.018133763170682566,
              Note('A0'): 0.114396785701587,
              Note('A#0'): 0.01163879440105247,
              Note('B0'): 0.078532231875125924},
 Note('F0'): {Note('C0'): 0.18185978561244787,
              Note('C#0'): 0.010543361554573777,
              Note('D0'): 0.10117402707126889,
              Note('D#0'): 0.014926161265907451,
              Note('E0'): 0.16487423653037156,
              Note('F0'): 0.11875803073240279,
              Note('F#0'): 0.0076038934750849276,
              Note('G0'): 0.19974301656311055,
              Note('G#0'): 0.013570837660394628,
              Note('A0'): 0.095999155122947211,
              Note('A#0'): 0.028761023005298082,
              Note('B0'): 0.062186471406192247},
 Note('F#0'): {Note('C0'): 0.092007618046890394,
               Note('C#0'): 0.030734878833650753,
               Note('D0'): 0.13522033230445918,
               Note('D#0'): 0.024364615485650488,
               Note('E0'): 0.11847376370920076,
               Note('F0'): 0.012543508241938662,
               Note('F#0'): 0.075326722269652591,
               Note('G0'): 0.22893544361988574,
               Note('G#0'): 0.038155907269980957,
               Note('A0'): 0.10179286793196296,
               Note('A#0'): 0.020030209496289485,
               Note('B0'): 0.12241413279043804},
 Note('G0'): {Note('C0'): 0.19374393348350824,
              Note('C#0'): 0.0068311264948812339,
              Note('D0'): 0.11832683185905536,
              Note('D#0'): 0.010823581121916379,
              Note('E0'): 0.12794168818563081,
              Note('F0'): 0.11283262824386939,
              Note('F#0'): 0.022352251707781625,
              Note('G0'): 0.20482391077413328,
              Note('G#0'): 0.0087540977601963266,
              Note('A0'): 0.10040657106752376,
              Note('A#0'): 0.013946120176547077,
              Note('B0'): 0.079217259124956502},
 Note('G#0'): {Note('C0'): 0.10911381772364552,
               Note('C#0'): 0.045443091138177238,
               Note('D0'): 0.085090298194036115,
               Note('D#0'): 0.052330953380932382,
               Note('E0'): 0.13028139437211256,
               Note('F0'): 0.065938681226375473,
               Note('F#0'): 0.054178916421671566,
               Note('G0'): 0.058882822343553132,
               Note('G#0'): 0.10986980260394792,
               Note('A0'): 0.16379672406551868,
               Note('A#0'): 0.029483410331793365,
               Note('B0'): 0.095590088198236028},
 Note('A0'): {Note('C0'): 0.12786041189931349,
              Note('C#0'): 0.020339034084066,
              Note('D0'): 0.12880886426592797,
              Note('D#0'): 0.0079790437191376608,
              Note('E0'): 0.12283210887630977,
              Note('F0'): 0.090675057208237986,
              Note('F#0'): 0.026466337468384921,
              Note('G0'): 0.17617126339877154,
              Note('G#0'): 0.020986390461279057,
              Note('A0'): 0.13069071419968686,
              Note('A#0'): 0.030365530531133327,
              Note('B0'): 0.11682524388775141},
 Note('A#0'): {Note('C0'): 0.14893297264803126,
               Note('C#0'): 0.03095882176134656,
               Note('D0'): 0.095731890592125043,
               Note('D#0'): 0.054328223624887283,
               Note('E0'): 0.073264201983769164,
               Note('F0'): 0.12308385933273219,
               Note('F#0'): 0.020814547640516982,
               Note('G0'): 0.12383528704538624,
               Note('G#0'): 0.025398256687706643,
               Note('A0'): 0.1600541027953111,
               Note('A#0'): 0.10422302374511572,
               Note('B0'): 0.039374812143071834},
 Note('B0'): {Note('C0'): 0.2153759925268566,
              Note('C#0'): 0.016198038299859878,
              Note('D0'): 0.1061373190098085,
              Note('D#0'): 0.012181223727230267,
              Note('E0'): 0.14682858477347033,
              Note('F0'): 0.06023353573096684,
              Note('F#0'): 0.023895375992526856,
              Note('G0'): 0.15588977113498365,
              Note('G#0'): 0.020700607192900514,
              Note('A0'): 0.13914992993928071,
              Note('A#0'): 0.0065203176085941146,
              Note('B0'): 0.096889304063521725}}


for k, v in d.items():
    m= min(v.values())
    for i in xrange(12):
        n= Note(i)
        if n not in v:
            v[n]= m*0.01

    d[k]= dict((kk, vv/sum(v.values())) for kk, vv in v.items())

for i in xrange(12):
    n= Note(i)
    if n not in d:
        d[n]= dict((Note(j), 1.0/12) for j in xrange(12))

class ProbModel(object):
    def __init__(self, narmour_features_prob, notes_distr, use_harmony=True, use_narmour=True):
        self.narmour_features_prob= narmour_features_prob
        self.notes_distr= notes_distr
        self.use_harmony= use_harmony
        self.use_narmour= use_narmour

    def get_features_prob(self, features, feature_name=None):
        res= 1.0
        if feature_name is not None:
            return self.narmour_features_prob[feature_name][features[feature_name]]
        else:
            for k, v in features.iteritems():
                #if v not in self.narmour_features_prob[k]: import ipdb;ipdb.set_trace()
                res*= self.narmour_features_prob[k][v]
        return res            

    def get_interval_prob(self, i1_length, i2_length, feature_name=None):
        features= get_interval_features(i1_length, i2_length)

        return self.get_features_prob(features, feature_name)

    def get_prob(self, n1, n2, n3, use_harmony=None, feature_name=None):
        if use_harmony is None: use_harmony= self.use_harmony 
        features= get_features(n1, n2, n3)

        res= 1.0
        if self.use_narmour:
            res*= self.get_features_prob(features, feature_name)
        if use_harmony: 
            if isinstance(n3, int): n3= Note(n3) # XXX que paso aca?
            if n3 not in self.notes_distr: import ipdb;ipdb.set_trace()
            res*= self.notes_distr[n3]
            #res*= d[Note(n2 % 12)][n3.get_canonical_note()]            
        return res            



