Index: train3.py
===================================================================
--- train3.py	(revision 213)
+++ train3.py	(working copy)
@@ -19,6 +19,7 @@
 
 from optparse import OptionParser
 from electrozart.algorithms.hmm.melody.narmour_hmm import NarmourInterval
+from electrozart import Instrument
 
 def get_node_name(score, ticks):
     if isinstance(ticks, NarmourInterval):
@@ -47,16 +48,23 @@
     parser.add_option('--output-dir', dest='output_dir', default='output-mids', help='the default output dir')
     parser.add_option('-O', '--override', dest='override', help='if the outputfile exists, overrides. Default False', default=False, action='store_true')
     parser.add_option('--pitch-offset', dest='offset', default=0, type='int')
-    parser.add_option('--disable-part-repetition', dest='enable_part_repetition', default=True, action='store_false')
+    parser.add_option('--disable-part-repetition', dest='enable_part_repetition', default=False, action='store_true')
     parser.add_option('--simple-narmour-model', dest='simple_narmour_model', default=False, action='store_true')
     parser.add_option('--global-notes-distr', dest='notes_distr_duration', default=True, action='store_false', help='uso por duracion o global? Default indexo por duracion')
     parser.add_option('-p', '--set-param', dest='params', action='append')
     parser.add_option('-s', '--save-info', dest= 'save_info', default=False, action='store_true')
+    parser.add_option('-S', '--only-save-info', dest= 'only_save_info', default=False, action='store_true')
+    parser.add_option('--folksong-narmour', dest= 'folksong_narmour', default=False, action='store_true')
+    parser.add_option('--load-narmour', dest= 'load_narmour_pickle')
+    parser.add_option('--save-narmour', dest= 'save_narmour_pickle')
+    parser.add_option('--no-phrase-narmour', dest= 'phrase_narmour', default=True, action='store_false')
 
 
+
     options, args= parser.parse_args(argv[1:])
     if len(args) < 1: parser.error('not enaught args')
 
+
     if options.params:
         params= {}
         for line in options.params:
@@ -116,12 +124,7 @@
 
 def train3(options, args):
     print "using seed", options.seed
-    random.seed(options.seed)
 
-    partition_algorithm= options.partition_algorithm
-    rythm_patch= options.rythm_patch
-    melody_patch= options.melody_patch
-    level= options.level
     infname= args[0]
     if len(args) >= 2:
         outfname= args[1]
@@ -151,7 +154,15 @@
         outfname= path.join(outpath, outfname)
 
 
+    # fnames
+    info_folder= outfname.replace('.mid', '-info')
+    params_file= outfname[:-3] + 'log'
+    diff_file= outfname[:-3] + 'diff'
+    svn_file= outfname[:-3] + 'svn'
+    solo_fname= outfname.replace('.mid', '-solo.mid')
+    wolp_fname= outfname.replace('.mid', '-wolp.mid')
     outfname= outfname.lower()
+
     parser= MidiScoreParser()
     score= parser.parse(infname)
     #score= quantize(score)
@@ -159,6 +170,17 @@
     composer= NarmourMarkov()
     composer= YamlComposer()
     composer= SupportNotesComposer()
+    if options.only_save_info:
+        composer.build_models(score, **options.__dict__)
+        print "\n\nSAVING INFO\n\n"
+        if os.path.exists(info_folder):
+            import shutil
+            shutil.rmtree(info_folder)
+        os.makedirs(info_folder)
+        composer.applier.save_info(info_folder, score)
+        print_files(params_file, diff_file, svn_file, outfname, solo_fname, wolp_fname, info_folder)
+        return
+
     composed_score, instrument= composer.compose(score, **options.__dict__)
     # XXX
     composer.original_score= score
@@ -168,49 +190,65 @@
     writer= MidiScoreWriter()
     writer.dump(composed_score, outfname)
 
-    composed_score.notes_per_instrument= {instrument: composed_score.get_notes(instrument=instrument)}
-    solo_fname= outfname.replace('.mid', '-solo.mid')
+    solo_notes= composed_score.get_notes(instrument=instrument)
+    piano= Instrument(patch=None)
+    composed_score.notes_per_instrument= {piano: solo_notes}
     writer.dump(composed_score, solo_fname)
 
+    lp_notes= set(score.get_first_voice())
+    notes_wolp= []
+    composed_score.notes_per_instrument= {instrument: solo_notes}
+    for i in score.instruments:
+        if i == instrument: continue
+        composed_score.notes_per_instrument[i]= [n for n in score.get_notes(instrument=i) if n not in lp_notes]
+
+    writer.dump(composed_score, wolp_fname)
+
     # draw things
     if options.save_info:
-        info_folder= outfname.replace('.mid', '-info')
         os.makedirs(info_folder)
+
         composer.applier.save_info(info_folder, score)
     
-    # save state
     params= composer.params
     params['options']= options.__dict__
     params['args']= args
+        
+    print_files(params_file, diff_file, svn_file, outfname, solo_fname, wolp_fname, info_folder)
+    save_state(composer, params_file, diff_file, svn_file)
+
+    print 'done!'
+
+    return composer
+
+def save_state(composer, params_file, diff_file, svn_file):
     from pprint import pprint
-    params_file= outfname[:-3] + 'log'
-    print "params file", params_file
     with open(params_file, 'w') as f:
         pprint(composer.params, f)
 
-    diff_file= outfname[:-3] + 'diff'
-    print "diff file", diff_file
     import subprocess
     with open(diff_file, 'w') as f:
         p= subprocess.Popen('svn diff .'.split(), stdout=subprocess.PIPE)
         f.write(p.stdout.read())
 
-    svn_version= outfname[:-3] + 'svn'
-    print "svn info file", svn_version
-    with open(svn_version, 'w') as f:
+    with open(svn_file, 'w') as f:
         p= subprocess.Popen('svn info'.split(), stdout=subprocess.PIPE)
         f.write(p.stdout.read())
+
+def print_files(params_file, diff_file, svn_file, outfname, solo_fname, wolp_fname, info_folder):
+    print "info folder", info_folder
+    print "params file", params_file
+    print "diff file", diff_file
+    print "svn info file", svn_file
         
     from utils.console import get_terminal_size
     width, height= get_terminal_size()
     print "*"*width
     print "midi file ", outfname
     print "solo file ", solo_fname
+    print "wolp file ", wolp_fname
     print "*"*width
-    print 'done!'
 
-    return composer
-
 if __name__ == '__main__':
     import sys
     composer= main(sys.argv)
Index: midistuff/midistuff/midi_messages.py
===================================================================
--- midistuff/midistuff/midi_messages.py	(revision 131)
+++ midistuff/midistuff/midi_messages.py	(working copy)
@@ -14,7 +14,8 @@
           mof :: MidiOutStream
         """
         method= getattr(mof, self.method_name)
-        method(*self.msg_args)
+        try: method(*self.msg_args)
+        except Exception, e: print "WARNING: ", e.message
 
     def __repr__(self):
         return 'MidiMessage(%s, %s, %s)' % (repr(self.msg_args), repr(self.method_name), self.time)
Index: config.py
===================================================================
--- config.py	(revision 131)
+++ config.py	(working copy)
@@ -1,6 +1,7 @@
 from electrozart.parsing.midi import MidiScoreParser, MidiPatchParser, MidiScoreParserCache 
 from electrozart.algorithms.hmm import HmmAlgorithm
 from electrozart.writing.midi import MidiScoreWriter
+from electrozart import *
 
 
 parserclass= MidiScoreParser
Index: electrozart/electrozart/base.py
===================================================================
--- electrozart/electrozart/base.py	(revision 247)
+++ electrozart/electrozart/base.py	(working copy)
@@ -24,7 +24,7 @@
         self.canon_notes= [n.get_canonical_note() for n in notes]
         
     def get_canonical(self):
-        return Chord(self.start, self.duration, list(set(n.get_canonical_note() for n in self.notes)), volume=self.volume)
+        return Chord(self.start, self.duration, self.canon_notes, volume=self.volume)
 
     def __repr__(self):
         return "Chord(%s)" % map(lambda n:n.get_canonical_note(), self.notes)
@@ -35,32 +35,103 @@
     def __hash__(self): return hash((tuple(self.notes), self.duration))
     
     @classmethod
-    def chordlist(cls, score, min_notes_per_chord=3):
+    def chordlist(cls, score, pitch_profile, enable_prints=True):
+        res= cls._chordlist(score, pitch_profile, enable_prints=enable_prints)
+        if len(res) < 10:
+            res= cls._chordlist(score, pitch_profile, allow_two=True, enable_prints=enable_prints)
+        return res            
+
+    @classmethod
+    def _chordlist(cls, score, pitch_profile, allow_two=False, enable_prints=True):
         all_notes= score.get_notes(skip_silences=True)
         res= []
         last_start= None
+        top_pitches= [n for n,p in sorted(pitch_profile.iteritems(), key=lambda x:x[1], reverse=True)][:7]
         for start, ns in groupby(all_notes, key=lambda n:n.start):
             ns= list(ns)
             chord_notes= set(n.get_canonical_note() for n in ns)
             #print len(ns)
-            if len(chord_notes) >= min_notes_per_chord: 
+            if len(chord_notes) >= 3 or (len(chord_notes) == 2 and allow_two): 
                 chord= cls(start, None, list(chord_notes))
-                chord.orig_notes= ns
+                best, best_score= chord.score_mdl()
+
+                if len(chord_notes) > 3 and best_score <= 1:
+                    if enable_prints: print "IGNORING CHORD:", best, "(%s)" % best_score
+                    continue
+
+                chord_extended= False
+
+                if len(chord_notes) == 2 or best_score <= 1: 
+                    for n in top_pitches:
+                        if n in chord_notes: continue
+                        chord.notes= list(chord_notes)[:]
+                        chord.notes.append(n)
+                        extended_chord, extended_chord_score= chord.score_mdl(pitch_profile)
+                        if extended_chord_score >= len(chord.notes)-1 and all(n in top_pitches for n in extended_chord[:3]):
+                            best= extended_chord
+                            chord_extended= True
+                            if enable_prints: print "EXTENDING %s with %s to %s" % (chord_notes, n, best)
+                            break
+                    else:                        
+                        if enable_prints: print "IGNORING CHORD:", best, "(%s)" % best_score
+                        continue
+
+                chord= cls(start, None, best[:3])
+                chord.extended= chord_extended
+                chord._orig_notes= ns
                 if len(res) > 0: 
-                    if set(n.get_canonical_note() for n in res[-1].notes) == chord_notes: continue
+                    if best == res[-1].notes: continue
+                    if set(best).issuperset(n.get_canonical_note() for n in res[-1].notes): 
+                        if enable_prints: print "JOINING", best, "with", res[-1]
+                        continue
+                    if set(best).issubset(n.get_canonical_note() for n in res[-1].notes): 
+                        if enable_prints: print "JOINING", best, "with", res[-1]
+                        continue
                     res[-1].duration= start - res[-1].start
                 res.append(chord)
 
         if len(res) > 0: 
             res[-1].duration= all_notes[-1].end - res[-1].start 
+
+        
         return res
+    
+    def score_mdl(self, pitch_profile=None):
+        max= arg_max= None
+        for n in self.notes: 
+            n_best, n_best_score= score_mdl(n, self.notes, [n], 0)
+            tonic_relation= ((n_best[1].pitch - n.pitch) % 12 in (3, 4))
+            if n_best_score > max or (n_best_score == max and tonic_relation==1):
+                max= n_best_score
+                arg_max= n_best
 
+        return arg_max, max
+
+
     def to_notelist(self):
         notes= []
         for note in self.notes:
             notes.append(PlayedNote(note.pitch, chord.start, chord.duration, self.volume or 100))
 
+def score_mdl(tonic, notes, best, best_score):
+    if len(notes) == len(best):
+        return best, best_score
+    else:
+        max= arg_max= None
+        for i, n in enumerate(notes):
+            if n in best: continue
+            
+            tonic_relation= ((n.pitch - tonic.pitch) % 12 in (3, 4))
+            n_best, n_best_score= score_mdl(n, notes, best + [n], best_score + tonic_relation)
+            if n_best_score > max or (n_best_score == max and tonic_relation==1):
+                max= n_best_score
+                arg_max= n_best
+
+        return arg_max, max
+
+
     
+    
 class Silence(Figure):
     """
     el silencio es una figura que no suena
@@ -92,7 +163,9 @@
     def __cmp__(self, other): return cmp(self.pitch, other.pitch)            
     def __hash__(self): return hash(self.pitch)
     def get_canonical_note(self): return Note(self.pitch%12)
-    def get_pitch_name(self): return self._pitches[self.pitch%12] + str(self.pitch/12)
+    def get_pitch_name(self, disable_octave=False): 
+        if disable_octave: return self._pitches[self.pitch%12]
+        else: return self._pitches[self.pitch%12] + str(self.pitch/12)
     
 
 class PitchClass(object):
@@ -140,6 +213,10 @@
         Note.__init__(self, pitch) 
         self.volume= volume
     
+    def __eq__(self, other):
+        return id(self) == id(other)
+    def __hash__(self):
+        return hash(id(self))
     @property
     def is_silence(self): return False
     def copy(self): return PlayedNote(self.pitch, self.start, self.duration, self.volume) 
@@ -149,8 +226,8 @@
 
 class Instrument(object):
     id_seq= 0
-    def __init__(self, is_drums=False):
-        self._patch= None
+    def __init__(self, is_drums=False, patch=None):
+        self._patch= patch
         self.is_drums= is_drums
         self.messages= []
         self.channel= None
@@ -235,10 +312,14 @@
 
 
     def get_first_voice(self, skip_silences=False, relative_to=None):
-        allnotes= list(chain(*self.notes_per_instrument.values()))
-        allnotes.sort(key=lambda x:x.start)
+        all_notes= []
+        for instr in self.instruments:
+            if instr.is_drums: continue
+            all_notes.extend(self.get_notes(instrument=instr))
+
+        all_notes.sort(key=lambda x:x.start)
         res= []
-        for start, ns in groupby(allnotes, key=lambda x:x.start):
+        for start, ns in groupby(all_notes, key=lambda x:x.start):
             n= max(ns, key=lambda x:-1 if x.is_silence else x.pitch)
             res.append(n)
 
Index: electrozart/electrozart/algorithms/hmm/melody/complete_narmour_model.py
===================================================================
--- electrozart/electrozart/algorithms/hmm/melody/complete_narmour_model.py	(revision 298)
+++ electrozart/electrozart/algorithms/hmm/melody/complete_narmour_model.py	(working copy)
@@ -131,8 +131,11 @@
     @needs('rythm_phrase_len', 'notes_distr', 'prox_notes_distr', 'pitches_distr', 'prox_pitches_distr', 'now_chord', 'prox_chord', 'min_pitch', 'max_pitch')
     def generate_list(self, input, result, prev_notes):
         self.ec.input= input
+        #XXX
+        #print "GUARDA!!! use_harmony=False"
         now_prob_model= ProbModel(self.ec.narmour_features_prob, input.notes_distr, use_harmony=True)
         prox_prob_model= ProbModel(self.ec.narmour_features_prob, input.prox_notes_distr, use_harmony=True)
+        # XXX
 
         remaining_notes= input.rythm_phrase_len - (self.ec.last_support_note is not None)
         t= TimeMeasurer()
@@ -215,6 +218,7 @@
             else:
                 pass
                 #import ipdb;ipdb.set_trace()
+            #now_prob_model= ProbModel(self.ec.narmour_features_prob, input.notes_distr, use_harmony=True)
             for i in xrange(remaining_notes, 0, -1):
                 candidates= must[i].get(context)
                 if candidates is None or len(candidates)==0: 
Index: electrozart/electrozart/algorithms/hmm/harmonic_context.py
===================================================================
--- electrozart/electrozart/algorithms/hmm/harmonic_context.py	(revision 193)
+++ electrozart/electrozart/algorithms/hmm/harmonic_context.py	(working copy)
@@ -1,5 +1,4 @@
 from collections import defaultdict
-from random import choice
 
 from utils.hmm.hidden_markov_model import RandomObservation, DPRandomObservation, FullyRepeatableObservation
 from utils.hmm.random_variable import ConstantRandomVariable
Index: electrozart/electrozart/algorithms/base.py
===================================================================
--- electrozart/electrozart/algorithms/base.py	(revision 226)
+++ electrozart/electrozart/algorithms/base.py	(working copy)
@@ -85,7 +85,9 @@
     def __init__(self, *args, **kwargs):
         super(Algorithm, self).__init__(*args, **kwargs)
         self.ec= ExecutionContext()
-        self.random= Random(kwargs.get('seed'))
+        if 'seed' not in kwargs or kwargs.get('seed') is None: import ipdb;ipdb.set_trace()
+        self.random= Random(kwargs['seed'])
+        self.ec.seed= kwargs['seed']
         
     def start_creation(self): 
         self.ec= ExecutionContext()
Index: electrozart/electrozart/algorithms/applier.py
===================================================================
--- electrozart/electrozart/algorithms/applier.py	(revision 189)
+++ electrozart/electrozart/algorithms/applier.py	(working copy)
@@ -1,4 +1,5 @@
 from base import ExecutionContext, AcumulatedInput, PartialNote, Algorithm
+import sys, traceback
 from time import time as time_tell
 
 class AlgorithmsApplier(object):
@@ -19,8 +20,14 @@
 
     def save_info(self, folder, score):
         for algorithm in self.algorithms:
-            algorithm.save_info(folder, score)
+            try: algorithm.save_info(folder, score)
+            except: 
+                print "ERROR: failed to save info of %s" % algorithm.__class__.__name__
+                print '-'*60
+                traceback.print_exc(file=sys.stdout)
+                print '-'*60
 
+
     def create_melody(self, time, print_info=False, general_input=None):
         if not self.started:
             self.start_creation()
Index: electrozart/electrozart/algorithms/harmonic_context/contextes.py
===================================================================
--- electrozart/electrozart/algorithms/harmonic_context/contextes.py	(revision 250)
+++ electrozart/electrozart/algorithms/harmonic_context/contextes.py	(working copy)
@@ -36,16 +36,16 @@
                     if n.start < result.start+result.duration and \
                        n.end >=result.start]
 
-from random import choice
 class ChordHarmonicContext(Algorithm):
-    def __init__(self, context_score, *args, **kwargs):
+    def __init__(self, context_score, pitch_profile, *args, **kwargs):
         super(ChordHarmonicContext, self).__init__(*args, **kwargs)
         self.context_score= context_score
+        self.pitch_profile= pitch_profile
 
     def start_creation(self):
-        self.chordlist= Chord.chordlist(self.context_score, 3)
+        self.chordlist= Chord.chordlist(self.context_score, self.pitch_profile)
         #self.chords= {}
-        if self.chordlist[0].start > 0:
+        if len(self.chordlist) > 0 and self.chordlist[0].start > 0:
             #self.chordlist.insert(0, Chord(0, self.chordlist[0].start, [Note(i) for i in xrange(12)]))
             self.chordlist.insert(0, Chord(0, self.chordlist[0].start, self.chordlist[0].canon_notes))
         self.chord_pos= []
Index: electrozart/electrozart/algorithms/harmonic_context/notes_distr.py
===================================================================
--- electrozart/electrozart/algorithms/harmonic_context/notes_distr.py	(revision 244)
+++ electrozart/electrozart/algorithms/harmonic_context/notes_distr.py	(working copy)
@@ -4,7 +4,6 @@
 
 from collections import defaultdict
 
-from utils.random import convex_combination
 from utils.params import bind_params
 from electrozart import Note, Chord
 
@@ -17,7 +16,7 @@
         instance= super(NotesDistr, cls).__new__(cls, *args, **kwargs)
         instance.params.update(dict(global_profile_prior_weight = 4,#0.5,#1, #0.5, 
                                     proportional_to_duration    = True,
-                                    profile_smooth_factor       = 0.1))
+                                    profile_smooth_factor       = 0.05))
         return instance
         
     def __init__(self, score, **optional):
@@ -40,15 +39,33 @@
 
         now_pc= [n.get_canonical_note() for n in now_notes]
 
+        if len(now_pc) != 3: import ipdb;ipdb.set_trace()
+        ##XXX
+        #pitches_distr= dict(self.score_profile)
+        #top_three= sorted(pitches_distr.iteritems(), key=lambda x:x[1], reverse=True)[:3]
+        #for i, pc in enumerate(now_pc):
+        #    pc_prob= pitches_distr[pc]
+        #    other_pc, other_prob= top_three[i]
+        #    pitches_distr[pc]= other_prob
+        #    pitches_distr[other_pc]= pc_prob
+
+        #pitches_distr= pitches_distr.items()
+        #pitches_distr.sort()
+        #return pitches_distr
+        ##XXX
+
         pitches_distr= {}
         for pc, prob in self.score_profile:
-            pitches_distr[pc]= prob*self.params['global_profile_prior_weight']
+            #pitches_distr[pc]= self.params['global_profile_prior_weight']
+            pitches_distr[pc]= prob*len(now_notes) #self.params['global_profile_prior_weight']
+            #pitches_distr[pc]= prob*self.params['global_profile_prior_weight']
 
         for i, pc in enumerate(now_pc):
             #new_distr= self.matching_notes[pc]
             #for pc2, weight in new_distr.iteritems():
             #    pitches_distr[pc2]+=weight#*now_notes[i].duration
             pitches_distr[pc]+=1#*sqrt(float(now_notes[i].pitch - min_pitch)/(max_pitch-min_pitch))
+            #if i == 0: pitches_distr[pc]+=1
 
         s= float(sum(pitches_distr.itervalues()))
         for k, v in pitches_distr.iteritems():
@@ -74,6 +91,8 @@
             y= [i[1] for i in sorted(p, key=lambda x:x[0])]
             x= [i[0].pitch for i in sorted(p, key=lambda x:x[0])]
             e= pylab.plot(x, y, label='score profile', color='black')[0]
+            e.axes.set_xlabel('Nota')
+            e.axes.set_ylabel('Probabilidad')
             ax= e.axes.xaxis
             ax.set_major_formatter(ticker.FuncFormatter(format_pitch))
             ax.set_major_locator(ticker.MultipleLocator())
@@ -82,7 +101,7 @@
 
         do_plot(self.score_profile, 'prior-profile.png')
         from random import shuffle
-        chords= list(set(Chord.chordlist(score)))
+        chords= list(set(Chord.chordlist(score, dict(self.score_profile), enable_prints=False)))
         shuffle(chords)
         chords= chords[:4]
         def chord_name(c):
@@ -125,7 +144,9 @@
     min_weight= min(score_profile.itervalues())
     for i in xrange(12): 
         n= Note(i)
-        if n not in score_profile: score_profile[n]= min_weight*profile_smooth_factor
+        if n not in score_profile: 
+            score_profile[n]= min_weight*profile_smooth_factor
+            print "SMOOTHING", n
     
     s= sum(score_profile.itervalues())
     for pitch, weight in score_profile.iteritems():
Index: electrozart/electrozart/composers/support_notes.py
===================================================================
--- electrozart/electrozart/composers/support_notes.py	(revision 220)
+++ electrozart/electrozart/composers/support_notes.py	(working copy)
@@ -1,4 +1,5 @@
-from random import randint, seed
+from __future__ import with_statement
+from random import seed
 from math import sqrt
 from time import time
 
@@ -6,9 +7,9 @@
 
 from electrozart.algorithms.hmm.rythm import ListRythm, RythmHMM, RythmCacheAlgorithm
 
-from electrozart.algorithms.hmm.melody import NarmourHMM, ListMelody
+from electrozart.algorithms.hmm.melody import ListMelody
 from electrozart.algorithms.hmm.melody.complete_narmour_model import ContourAlgorithm
-#from electrozart.algorithms.hmm.melody.complete_narmour_model_wo_must import ContourAlgorithm
+from electrozart.algorithms.hmm.melody.complete_narmour_model_wo_must import SimpleContourAlgorithm
 
 from electrozart.algorithms.crp.phrase_repetition import PhraseRepetitions
 
@@ -45,82 +46,92 @@
             output_patch            = 33,
             patch                   = None,
             offset                  = 0,
-            enable_part_repetition  = True,
+            enable_part_repetition  = False,
             save_info               = False,
-            simple_narmour_model    = False,
-            notes_distr_duration    = True
+            notes_distr_duration    = True,
+            seed                    = None,
+            folksong_narmour        = False,
+            save_narmour_pickle     = None,
+            load_narmour_pickle     = None
+            )
 
-        )
 
     def matches_description(self, instrument, patch, channel):
         return instrument.patch == patch and (channel is None or instrument.channel == channel)
 
-    def compose(self, score, **optional):
+    def build_models(self, score, **optional):
         params= self.params= bind_params(self.params, optional)
-        melody_instrument= None
-        rythm_instrument= None
-        for instrument in score.instruments:
-            if self.matches_description(instrument, params['melody_patch'], params['melody_channel']):
-                melody_instrument= instrument
-            if self.matches_description(instrument, params['rythm_patch'], params['rythm_channel']):
-                rythm_instrument= instrument
-        # XXX
-        #if (melody_instrument is None or rythm_instrument is None) and len(score.instruments) > 1: raise Exception("Que instrument?")
-        else: 
-            rythm_instrument= melody_instrument= score.instruments[0]
+        if params['seed'] is None:
+            seed= int(time())
+            print "using seed:", seed
+            params['seed']= seed
         
-        interval_size= measure_interval_size(score, params['n_measures']) 
         
-        notes_distr= NotesDistr(score)
+        notes_distr= NotesDistr(score, seed=params['seed'])
         #if params['notes_distr_duration']: notes_distr= NotesDistrDuration(score)
         #else: notes_distr= NotesDistr(score)
-        tonic_notes_alg= TonicHarmonicContext(notes_distr) 
+        tonic_notes_alg= TonicHarmonicContext(notes_distr, seed=params['seed']) 
 
-        harmonic_context_alg= ChordHarmonicContext(score)
+        harmonic_context_alg= ChordHarmonicContext(score, dict(tonic_notes_alg.nd.pitches_distr()), seed=params['seed'])
         harmonic_context_alg= PhraseRepetitions(harmonic_context_alg, seed=params['seed'])
 
-        rythm_alg= RythmHMM(interval_size, instrument=rythm_instrument.patch, channel=rythm_instrument.channel, seed=params['seed'])
+        interval_size= measure_interval_size(score, params['n_measures']) 
+        rythm_alg= RythmHMM(interval_size, seed=params['seed'])
         #phrase_rythm_alg= rythm_alg
         phrase_rythm_alg= ListRythm(rythm_alg, seed=params['seed'])
         if params['enable_part_repetition']:
             phrase_rythm_alg= RythmCacheAlgorithm(phrase_rythm_alg, 'phrase_id', seed=params['seed'])
 
-        if params['simple_narmour_model']:
-            melody_alg= NarmourHMM(instrument=melody_instrument.patch, channel=melody_instrument.channel, seed=params['seed'])
-            phrase_melody_alg= melody_alg
-            if params['enable_part_repetition']:
-                phrase_melody_alg= ListMelody(melody_alg, seed=params['seed'])
-                phrase_melody_alg= CacheAlgorithm(ListMelody(melody_alg), 'phrase_id', seed=params['seed'])
-        else:                
+        if params['load_narmour_pickle'] is not None:
+            import pickle
+            with open(params['load_narmour_pickle']) as f:
+                melody_alg= ContourAlgorithm.load(f, seed=params['seed'])
+        elif params['phrase_narmour']:            
             melody_alg= ContourAlgorithm(seed=params['seed'])
-            phrase_melody_alg= melody_alg
-            #import ipdb;ipdb.set_trace()
-            if params['enable_part_repetition']:
-                phrase_melody_alg= CacheAlgorithm(phrase_melody_alg, 'phrase_id', seed=params['seed'])
+        else:            
+            melody_alg= SimpleContourAlgorithm(seed=params['seed'])
 
+        phrase_melody_alg= melody_alg
+        if params['enable_part_repetition']:
+            phrase_melody_alg= CacheAlgorithm(phrase_melody_alg, 'phrase_id', seed=params['seed'])
 
-        #rythm_score= score.copy()
-        #rythm_score.notes_per_instrument.pop(piano)
-        print "todos los intrsumentos"
-        melody_alg.train(score)
-        for instrument in score.instruments:
-            if not instrument.is_drums and params['simple_narmour_model']:
-                melody_alg.obsSeqBuilder.builder.patch= instrument.patch
-                melody_alg.obsSeqBuilder.builder.channel= instrument.channel
-                melody_alg.train(score)
-            rythm_alg.obsSeqBuilder.builder.patch= instrument.patch
-            rythm_alg.obsSeqBuilder.builder.channel= instrument.channel
-            rythm_alg.train(score)
 
+        if not params['folksong_narmour'] and params['load_narmour_pickle'] is None:
+            melody_alg.train(score)
+            if params['save_narmour_pickle']:
+                with open(params['save_narmour_pickle'], 'w') as f:
+                    melody_alg.dump(f)
+
+        rythm_alg.train(score)
+
         harmonic_context_alg.train(score)
 
-        applier= AlgorithmsApplier(tonic_notes_alg, harmonic_context_alg, phrase_rythm_alg, notes_distr, phrase_melody_alg)
-        self.applier= applier
+        # XXX
+        melody_alg.notes_distr= harmonic_context_alg.harmonic_context_alg.pitch_profile
+        # XXX
+        applier= self.applier= AlgorithmsApplier(tonic_notes_alg, harmonic_context_alg, phrase_rythm_alg, notes_distr, phrase_melody_alg)
+        self.algorithms= {'tonic_notes_alg':tonic_notes_alg, 
+                          'harmonic_context_alg':harmonic_context_alg, 
+                          'rythm_alg':rythm_alg,
+                          'phrase_rythm_alg':phrase_rythm_alg, 
+                          'notes_distr':notes_distr, 
+                          'phrase_melody_alg':phrase_melody_alg}
+
         applier.start_creation()
+        return applier
 
+    def compose(self, score, **optional):
+        params= self.params= bind_params(self.params, optional)
+        applier= self.build_models(score, **optional) 
+        
+        #import pickle
+        #f=open('r.pickle','w')
+        #pickle.dump(rythm_alg.model, f, 2)
+        #f.close()
+        #1/0
         # XXX
-        self.rythm_alg= rythm_alg#.draw_model('rythm.png', score.divisions)
-        self.melody_alg= melody_alg #.model.draw('melody.png', str)
+        #self.rythm_alg= rythm_alg#.draw_model('rythm.png', score.divisions)
+        #self.melody_alg= melody_alg #.model.draw('melody.png', str)
 
         duration= score.duration
         #duration= harmonic_context_alg.harmonic_context_alg.chordlist[-1].end
@@ -164,33 +175,34 @@
         #duration= chord_notes[-1].end
 
         res= score.copy()
-        rythm_alg.model.calculate_metrical_accents()
+        self.algorithms['rythm_alg'].model.calculate_metrical_accents()
         #rythm_alg.model.draw_accents('accents.png', score.divisions)
         import random
+        rnd= random.Random(params['seed'])
         cache= {}
         def random_accent(note):
-            moment= (note.start%rythm_alg.model.interval_size)/rythm_alg.model.global_gcd
+            moment= (note.start%self.algorithms['rythm_alg'].model.interval_size)/self.algorithms['rythm_alg'].model.global_gcd
             res= cache.get(moment)
             if res is None:
-                res= randint(1, 6)
+                res= rnd.randint(1, 6)
                 cache[moment]= res
             return res
         def dec_accent(note):            
-            moment= (note.start%rythm_alg.model.interval_size)/rythm_alg.model.global_gcd
+            moment= (note.start%self.algorithms['rythm_alg'].model.interval_size)/self.algorithms['rythm_alg'].model.global_gcd
             res= cache.get(moment)
             if res is None:
                 res= 7-moment
                 cache[moment]= res
             return res
         def inc_accent(note):            
-            moment= (note.start%rythm_alg.model.interval_size)/rythm_alg.model.global_gcd
+            moment= (note.start%self.algorithms['rythm_alg'].model.interval_size)/self.algorithms['rythm_alg'].model.global_gcd
             res= cache.get(moment)
             if res is None:
                 res= moment + 1 
                 cache[moment]= res
             return res
 
-        accent_func= rythm_alg.model.get_metrical_accent 
+        accent_func= self.algorithms['rythm_alg'].model.get_metrical_accent 
         accent_func= inc_accent
         accent_func= dec_accent
         accent_func= random_accent
@@ -234,7 +246,6 @@
         instrument.patch= 74 #flauta
         instrument.patch= 25
         res.notes_per_instrument[instrument]= notes
-        #res.notes_per_instrument= {instrument: notes, melody_instrument:res.notes_per_instrument[melody_instrument]}
         #res.notes_per_instrument= {instrument: notes}
         #res.notes_per_instrument[piano]= chord_notes
 
Index: shell.py
===================================================================
--- shell.py	(revision 131)
+++ shell.py	(working copy)
@@ -1,4 +1,4 @@
-from sys import argv
+import sys 
 from electrozart.parsing.midi import MidiScoreParser, MidiPatchParser, MidiScoreParserCache 
 #from electrozart.algorithms.lsa import apply_lsa
 from electrozart.writing.midi import MidiScoreWriter
Index: utils/utils/hmm/random_variable.py
===================================================================
--- utils/utils/hmm/random_variable.py	(revision 218)
+++ utils/utils/hmm/random_variable.py	(working copy)
@@ -49,6 +49,7 @@
         """
         RandomVariable.__init__(self, name)
         self.values= dict(values.items())
+        if random is None:import ipdb;ipdb.set_trace()
         self.random= random
 
     def add_value(self, value, prob):
Index: analyze_quantization.py
===================================================================
--- analyze_quantization.py	(revision 252)
+++ analyze_quantization.py	(working copy)
@@ -42,6 +42,7 @@
     score= parser.parse(fname)
     interval_size= measure_interval_size(score, 1)
     durations= set(n.start % interval_size for n in score.get_notes())
+    durations.update(n.end % interval_size for n in score.get_notes())
     return durations
 
 if __name__ == '__main__':
Index: experiments/test_files
===================================================================
--- experiments/test_files	(revision 178)
+++ experiments/test_files	(working copy)
@@ -1,5 +1,4 @@
 ../input-mids/Chacarerasa.mid
-../input-mids/EliteSyncopations.mid
 ../input-mids/vals.mid
 ../input-mids/melisma/kp/bach.kindlein.mid
 ../input-mids/melisma/kp/beet.strio.mid
Index: experiments/common.yaml
===================================================================
--- experiments/common.yaml	(revision 180)
+++ experiments/common.yaml	(working copy)
@@ -1,4 +1,5 @@
 main:
     train3:main
 options:
-    seed: 3568
+    seed: 234651
+    save-info: True
Index: experiments/notes_distr/a.yaml
===================================================================
--- experiments/notes_distr/a.yaml	(revision 178)
+++ experiments/notes_distr/a.yaml	(working copy)
@@ -1,4 +1,4 @@
 include:
     - common.yaml
 electrozart.algorithms.harmonic_context.notes_distr:NotesDistr:
-     global_profile_prior_weight: 10
+     global_profile_prior_weight: 0.5
Index: experiments/notes_distr/b.yaml
===================================================================
--- experiments/notes_distr/b.yaml	(revision 178)
+++ experiments/notes_distr/b.yaml	(working copy)
@@ -1,4 +1,4 @@
 include:
     - common.yaml
 electrozart.algorithms.harmonic_context.notes_distr:NotesDistr:
-     global_profile_prior_weight: 1
+     global_profile_prior_weight: 2
Index: experiments/notes_distr/c.yaml
===================================================================
--- experiments/notes_distr/c.yaml	(revision 178)
+++ experiments/notes_distr/c.yaml	(working copy)
@@ -1,4 +1,5 @@
 include:
     - common.yaml
-electrozart.algorithms.harmonic_context.notes_distr:NotesDistr:
-     global_profile_prior_weight: 0.5
+electrozart.algorithms.hmm.melody.complete_narmour_model:ContourAlgorithm:
+    support_note_percent: 0.5
+    middle_note_percent: 1
Index: notes_distr_plots.py
===================================================================
--- notes_distr_plots.py	(revision 252)
+++ notes_distr_plots.py	(working copy)
@@ -22,6 +22,8 @@
     y= [i[1] for i in sorted(p, key=lambda x:x[0])]
     x= [i[0].pitch for i in sorted(p, key=lambda x:x[0])]
     e= pylab.plot(x, y, label='score profile', color='black')[0]
+    e.axes.set_xlabel('Nota')
+    e.axes.set_ylabel('Probabilidad')
     ax= e.axes.xaxis
     ax.set_major_formatter(ticker.FuncFormatter(format_pitch))
     ax.set_major_locator(ticker.MultipleLocator())
@@ -35,6 +37,8 @@
         y= [i[1] for i in sorted(p, key=lambda x:x[0])]
         x= [i[0].pitch for i in sorted(p, key=lambda x:x[0])]
         e= pylab.plot(x, y, label=label, color='black')[0]
+        e.axes.set_xlabel('Nota')
+        e.axes.set_ylabel('Probabilidad')
         ax= e.axes.xaxis
         ax.set_major_formatter(ticker.FuncFormatter(format_pitch))
         ax.set_major_locator(ticker.MultipleLocator())
Index: compare.py
===================================================================
--- compare.py	(revision 251)
+++ compare.py	(working copy)
@@ -34,6 +34,8 @@
     analysis_table= '<table border="1">\n%s\n</table>' % rows
 
     solo_len= analysis['solo1_len']
+    if analysis['different_onsets'] != 0:
+        print "WARNING: different_onsets = %s" % analysis['different_onsets']
 
     html= '<html><body>\n%s\n<br><br><strong>solo length:</strong>%s\n%s\n</body></html>' % (desc_table, solo_len, analysis_table)
     with open('out.html', 'w') as f:
@@ -86,6 +88,7 @@
             'solo2_len':len(solo2)}
 
 def get_solo_instrument(score, patch):
+    if len(score.instruments) == 1: return score.instruments[0]
     candidates= [i for i in score.instruments if i.patch == patch]
     if len(candidates) != 1: import ipdb;ipdb.set_trace()
     return candidates[0]
